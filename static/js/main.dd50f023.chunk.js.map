{"version":3,"sources":["Categories.js","ProductList.js","CartSummary.js","Navi.js","NotFound.js","CartList.js","App.js","serviceWorker.js","index.js"],"names":["Categories","state","categories","getCategories","fetch","then","response","json","data","setState","this","Container","ListGroup","horizontal","map","category","ListGroupItem","active","categoryName","props","currentCategory","onClick","changeCategory","key","categoryId","currentCaregory","Component","ProductList","Table","bordered","products","product","id","scope","productName","unitPrice","quantityPerUnit","unitsInStock","Button","addToCart","color","CartSummary","UncontrolledDropdown","nav","inNavbar","DropdownToggle","caret","cart","length","DropdownMenu","right","cartItem","DropdownItem","Badge","removeFromCart","quantity","divider","to","NavItem","NavLink","renderSummary","renderEmptyCart","Navi","toggle","bind","isOpen","Navbar","light","expand","NavbarBrand","href","NavbarToggler","Collapse","navbar","Nav","className","React","NotFound","CartList","striped","renderCart","App","getProducts","url","newCart","addedItem","find","c","push","alertify","success","filter","error","Row","exact","path","render","component","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"gPAEqBA,E,4MAEbC,MAAQ,CACJC,WAAY,I,EAKhBC,cAAgB,WACZC,MAAM,oCACLC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UACxBF,MAAK,SAAAG,GAAI,OAAE,EAAKC,SAAS,CAACP,WAAWM,Q,kEALtCE,KAAKP,kB,+BAOH,IAAD,OACL,OACI,kBAACQ,EAAA,EAAD,KACI,0CACA,kBAACC,EAAA,EAAD,CAAWC,YAAU,GAChBH,KAAKT,MAAMC,WAAWY,KAAI,SAAAC,GAAQ,OAC/B,kBAACC,EAAA,EAAD,CAAeC,OAAQF,EAASG,eAAe,EAAKC,MAAMC,gBACtDC,QAAS,kBAAM,EAAKF,MAAMG,eAAeP,IACzCQ,IAAKR,EAASS,YACTT,EAASG,kBAK1B,4BAAKR,KAAKS,MAAMM,sB,GA3BQC,a,gBCAnBC,E,uKAET,IAAD,OACP,OACE,kBAAChB,EAAA,EAAD,KACE,4CAAkB,kBAAoBD,KAAKS,MAAMC,iBACjD,kBAACQ,EAAA,EAAD,CAAOC,UAAQ,GACb,+BACE,4BACE,iCACA,4CACA,0CACA,iDACA,8CACA,+BAGJ,+BACGnB,KAAKS,MAAMW,SAAShB,KAAI,SAAAiB,GAAO,OAC9B,wBAAIR,IAAKQ,EAAQC,IACf,wBAAIC,MAAM,OAAOF,EAAQC,IACzB,4BAAKD,EAAQG,aACb,4BAAKH,EAAQI,WACb,4BAAKJ,EAAQK,iBACb,4BAAKL,EAAQM,cACb,4BAAI,kBAACC,EAAA,EAAD,CAAQjB,QAAS,kBAAM,EAAKF,MAAMoB,UAAUR,IAAUS,MAAM,QAA5D,2B,GAzBqBd,a,2ECapBe,E,8KACA,IAAD,OACZ,OACI,kBAACC,EAAA,EAAD,CAAsBC,KAAG,EAACC,UAAQ,GAC9B,kBAACC,EAAA,EAAD,CAAgBF,KAAG,EAACG,OAAK,GAAzB,cACgBpC,KAAKS,MAAM4B,KAAKC,QAEhC,kBAACC,EAAA,EAAD,CAAcC,OAAK,GACdxC,KAAKS,MAAM4B,KAAKjC,KAAI,SAAAqC,GAAQ,OACzB,kBAACC,EAAA,EAAD,CAAc7B,IAAK4B,EAASpB,QAAQC,IAChC,kBAACqB,EAAA,EAAD,CAAOb,MAAM,SAASnB,QAAS,kBAAI,EAAKF,MAAMmC,eAAeH,EAASpB,WAAtE,KACCoB,EAASpB,QAAQG,YAClB,kBAACmB,EAAA,EAAD,CAAOb,MAAM,WAAWW,EAASI,cAGzC,kBAACH,EAAA,EAAD,CAAcI,SAAO,IACrB,kBAACJ,EAAA,EAAD,KACI,kBAAC,IAAD,CAAMK,GAAG,QAAT,mB,wCAOhB,OACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,sB,+BAKR,OACI,6BACKjD,KAAKS,MAAM4B,KAAKC,OAAS,EAAItC,KAAKkD,gBAAkBlD,KAAKmD,uB,GAjCjCnC,a,0CCDpBoC,E,kDACnB,WAAY3C,GAAQ,IAAD,8BACjB,cAAMA,IAED4C,OAAS,EAAKA,OAAOC,KAAZ,gBACd,EAAK/D,MAAQ,CACXgE,QAAQ,GALO,E,qDASjBvD,KAAKD,SAAS,CACZwD,QAASvD,KAAKT,MAAMgE,W,+BAItB,OACE,6BACE,kBAACC,EAAA,EAAD,CAAQ1B,MAAM,QAAQ2B,OAAK,EAACC,OAAO,MACjC,kBAACC,EAAA,EAAD,CAAaC,KAAK,KAAlB,wBACA,kBAACC,EAAA,EAAD,CAAelD,QAASX,KAAKqD,SAC7B,kBAACS,EAAA,EAAD,CAAUP,OAAQvD,KAAKT,MAAMgE,OAAQQ,QAAM,GACzC,kBAACC,EAAA,EAAD,CAAKC,UAAU,UAAUF,QAAM,GAC7B,kBAACf,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAASW,KAAK,8CAGlB,kBAAC,EAAD,CAAahB,eAAgB5C,KAAKS,MAAMmC,eAAgBP,KAAMrC,KAAKS,MAAM4B,e,GA1BnD6B,IAAMlD,W,wBCZnBmD,E,uKAEb,OACI,+C,GAH0BnD,aCCjBoD,E,2KACH,IAAD,OACT,OACI,kBAAClD,EAAA,EAAD,CAAOmD,SAAO,GACV,+BACI,4BACI,kCACA,2CACA,4CACA,0CACA,8CACA,0CAGR,+BAEQrE,KAAKS,MAAM4B,KAAKjC,KAAI,SAAAqC,GAAQ,OACxB,wBAAI5B,IAAK4B,EAASpB,QAAQC,IACtB,4BAAKmB,EAASpB,QAAQC,IACtB,4BAAKmB,EAASpB,QAAQP,YACtB,4BAAK2B,EAASpB,QAAQG,aACtB,4BAAKiB,EAASpB,QAAQI,WACtB,4BAAKgB,EAASpB,QAAQM,cACtB,4BAAKc,EAASI,UACd,4BAAI,kBAACjB,EAAA,EAAD,CAAQjB,QAAS,kBAAM,EAAKF,MAAMmC,eAAeH,EAASpB,UAAUS,MAAM,UAA1E,wB,+BAS5B,OACI,6BACK9B,KAAKsE,kB,GAnCgBtD,aCQjBuD,E,4MACnBhF,MAAQ,CAAEmB,gBAAiB,GAAIU,SAAU,GAAIiB,KAAM,I,EAInDzB,eAAiB,SAAAP,GACf,EAAKN,SAAS,CAAEW,gBAAiBL,EAASG,eAC1C,EAAKgE,YAAYnE,EAASiB,K,EAE5BkD,YAAc,SAAA1D,GACZ,IAAI2D,EAAM,iCACN3D,IACF2D,GAAO,eAAiB3D,GAE1BpB,MAAM+E,GACH9E,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAI,EAAKC,SAAS,CAAEqB,SAAUtB,Q,EAE5C+B,UAAY,SAACR,GACX,IAAIqD,EAAU,EAAKnF,MAAM8C,KACrBsC,EAAYD,EAAQE,MAAK,SAAAC,GAAC,OAAIA,EAAExD,QAAQC,KAAOD,EAAQC,MACvDqD,EACFA,EAAU9B,WAGV6B,EAAQI,KAAK,CAAEzD,QAASA,EAASwB,SAAU,IAE7C,EAAK9C,SAAS,CAAEsC,KAAMqC,IACtBK,IAASC,QAAQ3D,EAAQG,YAAc,qB,EAGzCoB,eAAiB,SAACvB,GAChB,IAAIqD,EAAU,EAAKnF,MAAM8C,KAAK4C,QAAO,SAAAJ,GAAC,OAAIA,EAAExD,QAAQC,KAAOD,EAAQC,MACnE,EAAKvB,SAAS,CAAEsC,KAAMqC,IACtBK,IAASG,MAAM7D,EAAQG,YAAc,yB,kEA/BrCxB,KAAKwE,gB,+BAiCG,IAAD,OAEP,OACE,kBAACvE,EAAA,EAAD,KACE,kBAAC,EAAD,CAAM2C,eAAgB5C,KAAK4C,eAAgBP,KAAMrC,KAAKT,MAAM8C,OAC5D,kBAAC8C,EAAA,EAAD,KAEI,kBAAC,EAAD,CAAYzE,gBAAiBV,KAAKT,MAAMmB,gBAAiBE,eAAgBZ,KAAKY,kBAGhF,kBAACuE,EAAA,EAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,OAAQ,SAAA7E,GAAK,OACjC,kBAAC,EAAD,iBACMA,EADN,CAEEW,SAAU,EAAK7B,MAAM6B,SACrBS,UAAW,EAAKA,UAChBnB,gBAAiB,EAAKnB,MAAMmB,sBAEhC,kBAAC,IAAD,CAAO0E,OAAK,EAACC,KAAK,QAAQC,OAAQ,SAAA7E,GAAK,OACrC,kBAAC,EAAD,iBACMA,EADN,CAEE4B,KAAM,EAAK9C,MAAM8C,KACjBO,eAAgB,EAAKA,qBAEzB,kBAAC,IAAD,CAAO2C,UAAWpB,W,GA7DCnD,aCCbwE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCVNC,IAASP,OAAO,kBAAC,IAAMQ,WAAP,KAAkB,kBAAC,IAAD,KAAe,kBAAC,EAAD,QAA2CC,SAASC,eAAe,SD2H9G,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxG,MAAK,SAAAyG,GACJA,EAAaC,gBAEdC,OAAM,SAAApB,GACLqB,QAAQrB,MAAMA,EAAMsB,c","file":"static/js/main.dd50f023.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport {ListGroup, ListGroupItem, Container } from \"reactstrap\";\r\nexport default class Categories extends Component {\r\n  \r\n        state = {\r\n            categories: []\r\n        };\r\n        componentDidMount(){\r\n            this.getCategories();\r\n        }\r\n        getCategories = ()=>{\r\n            fetch(\"http://localhost:3000/categories\")\r\n            .then(response=>response.json())\r\n            .then(data=>this.setState({categories:data}));;\r\n    }\r\n    render() {\r\n        return (\r\n            <Container>\r\n                <h3>Categories</h3>\r\n                <ListGroup horizontal>\r\n                    {this.state.categories.map(category => (\r\n                        <ListGroupItem active={category.categoryName===this.props.currentCategory?true:false}\r\n                            onClick={() => this.props.changeCategory(category)}\r\n                            key={category.categoryId}>\r\n                                {category.categoryName}</ListGroupItem>\r\n                    ))}\r\n\r\n\r\n                </ListGroup>\r\n                <h3>{this.props.currentCaregory}</h3>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { Container, Table, Button } from \"reactstrap\";\r\nexport default class ProductList extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <Container>\r\n        <h3>Products  -  {\"Category Name: \" + this.props.currentCategory}</h3>\r\n        <Table bordered>\r\n          <thead>\r\n            <tr>\r\n              <th>#</th>\r\n              <th>Product Name</th>\r\n              <th>Unit Price</th>\r\n              <th>Quantity Per Unit</th>\r\n              <th>Units in Stock</th>\r\n              <th></th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {this.props.products.map(product => (\r\n              <tr key={product.id}>\r\n                <th scope=\"row\">{product.id}</th>\r\n                <td>{product.productName}</td>\r\n                <td>{product.unitPrice}</td>\r\n                <td>{product.quantityPerUnit}</td>\r\n                <td>{product.unitsInStock}</td>\r\n                <td><Button onClick={() => this.props.addToCart(product)} color=\"info\">Add to Cart</Button></td>\r\n              </tr>\r\n            ))}\r\n\r\n          </tbody>\r\n        </Table>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport {Link} from \"react-router-dom\"\r\n\r\nimport {\r\n    UncontrolledDropdown,\r\n    DropdownToggle,\r\n    DropdownMenu,\r\n    DropdownItem,\r\n    Badge,\r\n    NavItem,\r\n    NavLink\r\n\r\n} from \"reactstrap\";\r\n\r\n\r\nexport default class CartSummary extends Component {\r\n    renderSummary() {\r\n        return (\r\n            <UncontrolledDropdown nav inNavbar>\r\n                <DropdownToggle nav caret>\r\n                    Quantity - {this.props.cart.length}\r\n                </DropdownToggle>\r\n                <DropdownMenu right>\r\n                    {this.props.cart.map(cartItem => (\r\n                        <DropdownItem key={cartItem.product.id}>\r\n                            <Badge color=\"danger\" onClick={()=>this.props.removeFromCart(cartItem.product)}>X</Badge>\r\n                            {cartItem.product.productName}\r\n                            <Badge color=\"success\">{cartItem.quantity}</Badge></DropdownItem>\r\n                    ))}\r\n\r\n                    <DropdownItem divider />\r\n                    <DropdownItem>\r\n                        <Link to=\"cart\">Go to cart</Link>\r\n              </DropdownItem>\r\n                </DropdownMenu>\r\n            </UncontrolledDropdown>\r\n        );\r\n    }\r\n    renderEmptyCart() {\r\n        return (\r\n            <NavItem>\r\n                <NavLink>Empty Cart</NavLink>\r\n            </NavItem>\r\n        );\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.props.cart.length > 0 ? this.renderSummary() : this.renderEmptyCart()}\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport CartSummary from './CartSummary';\r\nimport {\r\n  Collapse,\r\n  Navbar,\r\n  NavbarToggler,\r\n  NavbarBrand,\r\n  Nav,\r\n  NavItem,\r\n  NavLink,\r\n\r\n} from \"reactstrap\";\r\n\r\n\r\nexport default class Navi extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.toggle = this.toggle.bind(this);\r\n    this.state = {\r\n      isOpen: false\r\n    };\r\n  }\r\n  toggle() {\r\n    this.setState({\r\n      isOpen: !this.state.isOpen\r\n    });\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Navbar color=\"light\" light expand=\"md\">\r\n          <NavbarBrand href=\"/\">React Test Page v1.0</NavbarBrand>\r\n          <NavbarToggler onClick={this.toggle} />\r\n          <Collapse isOpen={this.state.isOpen} navbar>\r\n            <Nav className=\"ml-auto\" navbar>\r\n              <NavItem>\r\n                <NavLink href=\"https://github.com/reactstrap/reactstrap\">\r\n                </NavLink>\r\n              </NavItem>\r\n            <CartSummary removeFromCart={this.props.removeFromCart} cart={this.props.cart}/>\r\n            </Nav>\r\n          </Collapse>\r\n        </Navbar>\r\n      </div>\r\n    );\r\n  }\r\n  }\r\n","import React, { Component } from 'react'\r\n\r\nexport default class NotFound extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                Not found!\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport {Table,Button} from \"reactstrap\"\r\n\r\nexport default class CartList extends Component {\r\n    renderCart() {\r\n        return (\r\n            <Table striped>\r\n                <thead>\r\n                    <tr>\r\n                        <th>id</th>\r\n                        <th>Category Id</th>\r\n                        <th>Product Name</th>\r\n                        <th>Unit Price</th>\r\n                        <th>Units in Stock</th>\r\n                        <th>Quantity</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {\r\n                        this.props.cart.map(cartItem => (\r\n                            <tr key={cartItem.product.id}>\r\n                                <td>{cartItem.product.id}</td>\r\n                                <td>{cartItem.product.categoryId}</td>\r\n                                <td>{cartItem.product.productName}</td>\r\n                                <td>{cartItem.product.unitPrice}</td>\r\n                                <td>{cartItem.product.unitsInStock}</td>\r\n                                <td>{cartItem.quantity}</td>\r\n                                <td><Button onClick={() => this.props.removeFromCart(cartItem.product)} color=\"danger\">Remove Item</Button></td>\r\n                            </tr>\r\n                        )) }\r\n                   \r\n                </tbody>\r\n            </Table>\r\n        )\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.renderCart()}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { Container, Row} from \"reactstrap\";\r\nimport Categories from './Categories';\r\nimport ProductList from './ProductList';\r\nimport Navi from './Navi';\r\nimport alertify from \"alertifyjs\"\r\nimport { Switch, Route } from \"react-router-dom\";\r\nimport NotFound from \"./NotFound\";\r\nimport CartList from \"./CartList\";\r\n\r\n\r\nexport default class App extends Component {\r\n  state = { currentCategory: \"\", products: [], cart: [] }\r\n  componentDidMount() {\r\n    this.getProducts();\r\n  }\r\n  changeCategory = category => {\r\n    this.setState({ currentCategory: category.categoryName });\r\n    this.getProducts(category.id);\r\n  };\r\n  getProducts = categoryId => {\r\n    let url = \"http://localhost:3000/products\"\r\n    if (categoryId) {\r\n      url += \"?categoryId=\" + categoryId;\r\n    }\r\n    fetch(url)\r\n      .then(response => response.json())\r\n      .then(data => this.setState({ products: data }));\r\n  };\r\n  addToCart = (product) => {\r\n    let newCart = this.state.cart;\r\n    var addedItem = newCart.find(c => c.product.id === product.id);\r\n    if (addedItem) {\r\n      addedItem.quantity++;\r\n    }\r\n    else {\r\n      newCart.push({ product: product, quantity: 1 });\r\n    }\r\n    this.setState({ cart: newCart });\r\n    alertify.success(product.productName + \" added to cart !\");\r\n  }\r\n\r\n  removeFromCart = (product) => {\r\n    let newCart = this.state.cart.filter(c => c.product.id !== product.id)\r\n    this.setState({ cart: newCart })\r\n    alertify.error(product.productName + \" removed from cart !\");\r\n  }\r\n  render() {\r\n\r\n    return (\r\n      <Container>\r\n        <Navi removeFromCart={this.removeFromCart} cart={this.state.cart} />\r\n        <Row>\r\n          \r\n            <Categories currentCategory={this.state.currentCategory} changeCategory={this.changeCategory} />\r\n         \r\n          </Row>\r\n          <Row >\r\n            <Switch>\r\n              <Route exact path=\"/\" render={props => (\r\n                <ProductList\r\n                  {...props}\r\n                  products={this.state.products}\r\n                  addToCart={this.addToCart}\r\n                  currentCategory={this.state.currentCategory} />\r\n              )} />\r\n              <Route exact path=\"/cart\" render={props => (\r\n                <CartList\r\n                  {...props}\r\n                  cart={this.state.cart}\r\n                  removeFromCart={this.removeFromCart}/>\r\n              )} />\r\n              <Route component={NotFound} />\r\n\r\n            </Switch>\r\n\r\n          </Row>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport 'alertifyjs/build/css/alertify.min.css'\r\nimport {BrowserRouter} from 'react-router-dom'\r\n\r\nReactDOM.render(<React.StrictMode><BrowserRouter><App /></BrowserRouter></React.StrictMode>,document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}