{"version":3,"sources":["Categories.js","ProductList.js","Navi.js","App.js","serviceWorker.js","index.js"],"names":["Categories","state","categories","categoryId","categoryName","categoryDetail","getCategories","fetch","then","response","json","data","setState","this","Container","ListGroup","map","category","ListGroupItem","active","props","currentCaregory","onClick","changeCategory","key","Component","ProductList","currentCategory","Table","bordered","products","product","id","scope","productName","unitPrice","quantityPerUnit","unitsInStock","Button","addToCart","color","Navi","toggle","bind","isOpen","Navbar","light","expand","NavbarBrand","href","NavbarToggler","Collapse","navbar","Nav","className","NavItem","NavLink","cart","length","React","App","getProducts","url","newCart","push","quantity","Row","Col","xs","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6bfb4fb9.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Container, ListGroup, ListGroupItem } from \"reactstrap\";\r\nexport default class Categories extends Component {\r\n  \r\n        state = {\r\n            categories: [\r\n                { categoryId: 1, categoryName: \"Home\", categoryDetail: \"Biography web page with react\" },\r\n                { categoryId: 2, categoryName: \"About me\", categoryDetail: \"I am Burakhan.\"},\r\n                { categoryId: 3, categoryName: \"Projects\", categoryDetail: \"Projects...\"},\r\n                { categoryId: 4, categoryName: \"Contact\", categoryDetail: \"E-Mail: burakhanbakir@gmail.com\"}\r\n\r\n            ]\r\n        };\r\n        componentDidMount(){\r\n            this.getCategories();\r\n        }\r\n        getCategories = ()=>{\r\n            fetch(\"http://localhost:3000/categories\")\r\n            .then(response=>response.json())\r\n            .then(data=>this.setState({categories:data}));;\r\n    }\r\n    render() {\r\n        return (\r\n            <Container>\r\n                <h3>Categories</h3>\r\n                <ListGroup>\r\n                    {this.state.categories.map(category => (\r\n                        <ListGroupItem active = {category.categoryName===this.props.currentCaregory?true:false}\r\n                            onClick={() => this.props.changeCategory(category)}\r\n                            key={category.categoryId}>\r\n                                {category.categoryName}</ListGroupItem>\r\n                    ))}\r\n\r\n\r\n                </ListGroup>\r\n                <h3>{this.props.currentCaregory}</h3>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { Container, Table, Button} from \"reactstrap\";\r\nexport default class ProductList extends Component {\r\n \r\n    render() {\r\n        return (\r\n            <Container>\r\n               <h3>Products  -  {\"Category Name: \" + this.props.currentCategory}</h3>\r\n               <Table bordered>\r\n      <thead>\r\n        <tr>\r\n          <th>#</th>\r\n          <th>Product Name</th>\r\n          <th>Unit Price</th>\r\n          <th>Quantity Per Unit</th>\r\n          <th>Units in Stock</th>\r\n          <th></th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n      {this.props.products.map(product => (\r\n              <tr key={product.id}>\r\n                <th scope=\"row\">{product.id}</th>\r\n                <td>{product.productName}</td>\r\n                <td>{product.unitPrice}</td>\r\n                <td>{product.quantityPerUnit}</td>\r\n                <td>{product.unitsInStock}</td>\r\n                <td><Button onClick={()=>this.props.addToCart(product)} color=\"info\">add</Button></td>\r\n              </tr>\r\n            ))}\r\n      \r\n      </tbody>\r\n    </Table>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport {\r\n  Collapse,\r\n  Navbar,\r\n  NavbarToggler,\r\n  NavbarBrand,\r\n  Nav,\r\n  NavItem,\r\n  NavLink\r\n} from \"reactstrap\";\r\n\r\n\r\nexport default class Navi extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.toggle = this.toggle.bind(this);\r\n    this.state = {\r\n      isOpen: false\r\n    };\r\n  }\r\n  toggle() {\r\n    this.setState({\r\n      isOpen: !this.state.isOpen\r\n    });\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Navbar color=\"light\" light expand=\"md\">\r\n          <NavbarBrand href=\"/\">React Test Page v1.0</NavbarBrand>\r\n          <NavbarToggler onClick={this.toggle} />\r\n          <Collapse isOpen={this.state.isOpen} navbar>\r\n            <Nav className=\"ml-auto\" navbar>\r\n              <NavItem>\r\n                <NavLink>\r\n                \r\n                </NavLink>\r\n              </NavItem>\r\n              <NavItem>\r\n                <NavLink>\r\n                \r\n                </NavLink>\r\n              </NavItem>\r\n              <NavItem>\r\n                <NavLink href=\"https://github.com/reactstrap/reactstrap\">\r\n                 {this.props.cart.length}\r\n                </NavLink>\r\n              </NavItem>\r\n            \r\n            </Nav>\r\n          </Collapse>\r\n        </Navbar>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\nimport { Container, Row, Col } from \"reactstrap\";\nimport Categories from './Categories';\nimport ProductList from './ProductList';\nimport Navi from './Navi';\n\n\nexport default class App extends Component {\n  state = { currentCategory: \"\", products: [],cart:[] }\n  componentDidMount() {\n    this.getProducts();\n  }\n  changeCategory = category => {\n    this.setState({ currentCategory: category.categoryName });\n    this.getProducts(category.id);\n  };\n  getProducts = categoryId => {\n    let url = \"http://localhost:3000/products\"\n    if (categoryId) {\n      url += \"?categoryId=\" + categoryId;\n    }\n    fetch(url)\n      .then(response => response.json())\n      .then(data => this.setState({ products: data }));\n  };\n  addToCart=(product)=>{\n    let newCart = this.state.cart;\n    //var addedItem = newCart.find(c=>c.product.id===product.id);\n    newCart.push({product:product,quantity:1});\n    this.setState({cart:newCart});\n  }\n  render() {\n\n    return (\n      <Container>\n        <Navi cart={this.state.cart} />\n        <Row>\n          <Col xs=\"3\">\n            <Categories currentCategory={this.state.currentCategory} changeCategory={this.changeCategory} />\n          </Col>\n          <Col xs=\"9\"><ProductList\n            products={this.state.products}\n            addToCart={this.addToCart}\n            currentCategory={this.state.currentCategory} />\n          </Col></Row>\n      </Container>\n    );\n  }\n}\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nReactDOM.render(<React.StrictMode><App /></React.StrictMode>,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}